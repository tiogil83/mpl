Tsub gen_trans_net => << 'END';
    DESC {
          To generate the net info with transition violations.
    }
    ARGS {
        -i:$infile #To specify the input file, this file should be generated by mender report_vios -show path_end. 
        -o:$outfile #To specify the output file.
    }

open IN, "$infile" ;
open OUT, "> $outfile" ;
my $top = get_top ;

print OUT "Partition,Pin name,Reqd,Slack,Corner,Net name,Net length,Ref name,Driver Ref,Comment,\n" ;
while(<IN>){
  set_top $top ;
  if(/^\d+\s+/){
    /^\d+\s+(\S+)\s+(\S+)\s+\S+\s+(\S+)\s+(\S+)\s+/ ;
    my $pin = $1 ;
    my $req = $2 ;
    my $slack = $3 ;
    my $corner = $4 ;
    $corner =~ s/\.typ.*//g ;
    my $block = attr_of_pin (base_design_cell_name => $pin) ; 
    my $base_pin = attr_of_pin (base_name => $pin) ;
    my $ref = attr_of_pin (ref_name => $pin) ;
    $block = uc $block ;
    my $length ;
    my $net ;
    my $top_net ;
    my $comment ;
    my $driver = get_driver $pin ;
    $length = get_dist ($pin => $driver) ;
    #$top_net = net_of_pin $pin ;
    #if($net) {
    #  my $top_net_name = name_of_net $net ;
    #  my $top_net = get_top_net $net_name ; 
    #  $length = get_net_length (-quiet => $top_net) ;
    #}
    if($length > 250) {
      $comment = "long_net" ;
    }
    my $driver_ref ;
    if (attr_of_ref (is_partition => $block)) {
      set_top $block ;
      print "$block $base_pin\n" ;
      $net = net_of_pin $base_pin ;
      if($net){
        $net_name = name_of_net $net ;
      #  $length = get_net_length (-quiet => $net_name) ;
      #  if($length > 250) {
      #    $comment = " long_net" ;
      #  }
      #}else{
      #  $length = "no_length" ;
      }
      if (is_wide_net $net_name) {
        $comment .= " ndr_net" ; 
      }
      if (attr_of_pin (is_analog => $base_pin)) {
        $comment .= " is_analog_pin" ;
      }
      if (attr_of_net (is_port_conn => $net_name)) {
        $driver_ref = "is_port_conn" ;
      }else{
        my $driver = get_driver $base_pin ;
        $driver_ref = attr_of_pin (ref_name => $driver) ;
      }
    }else{
      next ;
    } 
    if (is_pad_cell $ref) {
      $comment .= " is_pad_pin" ;
    } 
    print OUT "$block,$base_pin,$req,$slack,$corner,$net_name,$length,$ref,$driver_ref,$comment,\n" ; 
    next ;
  }
}


close IN ;
close OUT ;

END

Tsub gen_trans_net_exlpad => << 'END';
    DESC {
          To generate the net info with transition violations.
    }
    ARGS {
        -i:$infile #To specify the input file, this file should be generated by mender report_vios -show path_end. 
        -o:$outfile #To specify the output file.
    }

open IN, "$infile" ;
open OUT, "> $outfile" ;
my $top = get_top ;

print OUT "Partition,Pin name,Reqd,Slack,Corner,Net name,Net length,Ref name,Driver Ref,Comment,\n" ;
while(<IN>){
  set_top $top ;
  if(/^\d+\s+/){
    /^\d+\s+(\S+)\s+(\S+)\s+\S+\s+(\S+)\s+(\S+)\s+/ ;
    my $pin = $1 ;
    my $req = $2 ;
    my $slack = $3 ;
    my $corner = $4 ;
    $corner =~ s/\.typ.*//g ;
    my $block = attr_of_pin (base_design_cell_name => $pin) ; 
    my $base_pin = attr_of_pin (base_name => $pin) ;
    my $ref = attr_of_pin (ref_name => $pin) ;
    $block = uc $block ;
    my $length ;
    my $net ;
    my $top_net ;
    my $comment ;
    my $driver = get_driver $pin ;
    $length = get_dist ($pin => $driver) ;
    #$top_net = net_of_pin $pin ;
    #if($net) {
    #  my $top_net_name = name_of_net $net ;
    #  my $top_net = get_top_net $net_name ; 
    #  $length = get_net_length (-quiet => $top_net) ;
    #}
    if($length > 250) {
      $comment = "long_net" ;
    }
    my $driver_ref ;
    if (attr_of_ref (is_partition => $block)) {
      set_top $block ;
      print "$block $base_pin\n" ;
      $net = net_of_pin $base_pin ;
      if($net){
        $net_name = name_of_net $net ;
      #  $length = get_net_length (-quiet => $net_name) ;
      #  if($length > 250) {
      #    $comment = " long_net" ;
      #  }
      #}else{
      #  $length = "no_length" ;
      }
      if (is_wide_net $net_name) {
        $comment .= " ndr_net" ; 
      }
      if (attr_of_pin (is_analog => $base_pin)) {
        $comment .= " is_analog_pin" ;
      }
      if (attr_of_net (is_port_conn => $net_name)) {
        $driver_ref = "is_port_conn" ;
      }else{
        my $driver = get_driver $base_pin ;
        $driver_ref = attr_of_pin (ref_name => $driver) ;
      }
    }else{
      next ;
    } 
    if (is_pad_cell $ref) {
      $comment .= " is_pad_pin" ;
    } 
    if ($comment eq " is_pad_pin") {
      next ;
    } else {
      print OUT "$block,$base_pin,$req,$slack,$corner,$net_name,$length,$ref,$driver_ref,$comment,\n" ; 
      next ;
    }
  }
}


close IN ;
close OUT ;

END
